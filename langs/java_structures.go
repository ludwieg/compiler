package langs

const javaAnnotationPackage = "@LudwiegPackage(id = {{.id}})"
const javaAnnotationStruct = "@Serializable"

const javaFieldAnnotationNative = "@LudwiegField(index = {{.index}}, protocolType = ProtocolType.{{.type}})"
const javaFieldAnnotationNativeArray = "@LudwiegField(index = {{.index}}, protocolType = ProtocolType.ARRAY, arrayType = ProtocolType.{{.type}})"
const javaFieldAnnotationCustom = "@LudwiegField(index = {{.index}}, protocolType = ProtocolType.Struct, structType = {{.type}}.class)"
const javaFieldAnnotationCustomArray = "@LudwiegField(index = {{.index}}, protocolType = ProtocolType.ARRAY, arrayType = ProtocolType.STRUCT, structType = {{.type}}.class)"

const javaField = "private {{.type}} {{.name}} = new {{.initializer}};"

const javaGetterNative = "public {{.type}} get{{.name}}() { return {{.fieldName}}.getValue(); }"
const javaGetterNativeAny = `public {{.type}} get{{.name}}() {
        return {{.fieldName}}.getValue() == null ? null : {{.fieldName}}.getValue();
    }`
const javaGetterNativeArray = "public {{.type}} get{{.name}}() { return {{.fieldName}}.getNativeArray({{baseType}}.class); }"
const javaGetterCustom = "public {{.type}} get{{.name}}() { return {{.fieldName}}.getNativeValue(); }"
const javaGetterCustomArray = `public {{.type}} get{{.name}}() {
        ArrayList<TypeStruct<{{.baseType}}>> list = {{.fieldName}}.getValue();
        ArrayList<{{.baseType}}>> arr = new ArrayList<>();
        if(list != null) {
            for (TypeStruct s : list) {
                arr.add(({{.baseType}})s.getNativeValue());
            }
        }
        return arr;
    }`

const javaSetterNative = `public {{.pkg}} set{{.name}}({{.baseType}} v) {
        {{.fieldName}}.setValue(v);
        return this;
    }`
const javaSetterNativeAny = `public {{.pkg}} set{{.name}}(Object o) {
        {{.fieldName}}.setValue(Type.Companion.coerce(o));
        return this;
    }

    public <T> {{.pkg}} set{{.name}}(T... a) {
        {{.fieldName}}.setValue(Type.Companion.coerce(new ArrayList<>(Arrays.asList(a))));
        return this;
	}`
const javaSetterNativeArray = `public set{{.name}}(Collection<{{.baseType}}> c) {
        {{.fieldName}}.setNativeArray(c);
        return this;
    }

    public {{.pkg}} set{{.name}}({{.baseType}}... a) { return this.set{{.name}}(Arrays.asList(a)); }`
const javaSetterCustom = `public {{.pkg}} set{{.name}}({{.baseType}} v) {
    {{.fieldName}}.setNativeValue(v);
    return this;
}`
const javaSetterCustomArray = `public {{.pkg}} set{{.name}}(Collection<{{.baseType}}> c) {
        ArrayList<TypeStruct<{{.baseType}}>> arr = new ArrayList<>();
        for({{.baseType}} i : c) {
            TypeStruct<{{.baseType}}> inst = new TypeStruct<>({{.baseType}}.class);
            inst.setNativeValue(i);
            arr.add(inst);
        }
        this.{{.fieldName}}.setValue(arr);
        return this;
    }

    public {{.pkg}} set{{.name}}({{.baseType}}... a) { return this.set{{.fieldName}}(Arrays.asList(a)); }`

const javaSetterNativeDynInt = `public {{.pkg}} set{{.name}}(byte v) {
        {{.fieldName}}.setValue(new DynInt(v));
        return this;
    }
    public {{.pkg}} set{{.name}}(int v) {
        {{.fieldName}}.setValue(new DynInt(v));
        return this;
    }
    public {{.pkg}} set{{.name}}(short v) {
        {{.fieldName}}.setValue(new DynInt(v));
        return this;
    }
    public {{.pkg}} set{{.name}}(long v) {
        {{.fieldName}}.setValue(new DynInt(v));
        return this;
    }
    public {{.pkg}} set{{.name}}(double v) {
        {{.fieldName}}.setValue(new DynInt(v));
        return this;
    }`

const javaEmptyPackage = `// WARNING: Automatically generated by ludco. DO NOT EDIT.

package {{.pkg}};

import io.vito.ludwieg.LudwiegPackage;

{{.annotation}}
public final class {{.name}} { }
`

const javaPackage = `// WARNING: Automatically generated by ludco. DO NOT EDIT.

package {{.pkg}};

import java.util.*;
import io.vito.ludwieg.*;
import io.vito.ludwieg.types.*;

{{.annotation}}
public final class {{.name}} {
    public {{.name}}() { }

{{.fields}}

{{.getters}}

{{.setters}}
}
`

const javaIntegrationSteps = `You just generated Java sources. In order to use them you need to perform a few
tasks.

  1. {{.dependencies}}
  *Notice*: This step assumes you use {{.gradle}} to handle your build automation. In
  case you use another tool, such as {{.maven}}, {{.sbt}}, or {{.leiningen}}, please refer to
  the documentation in the framework repository https://github.com/ludwieg/kotlin#installing
  and skip to step 2.

    1.1. Add {{.jitPack}} to your {{.gradle}} repository list:

{{.jitPackRepository}}

    1.2. Add {{.libPath}} as a dependency of your project:

{{.jitPackDependency}}

  2. {{.integration}}
  Copy output files to your project

  3. {{.initialization}}
  Before attempting deserializing data, you must register output packages.
  This operation must be performed only once, usually in your application's
  boot:

    {{.javaImportLudwieg}}
    {{.javaImportPkg}}

    ...

    {{.javaRegister}}
`
